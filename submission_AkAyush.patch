diff --git a/App.tsx b/App.tsx
index f8b946d..bb58322 100644
--- a/App.tsx
+++ b/App.tsx
@@ -1,20 +1,9 @@
-import { StatusBar } from 'expo-status-bar';
-import { StyleSheet, Text, View } from 'react-native';
+import React from 'react';
+import ForYouScreen from './screen/ForYouPage';
 
 export default function App() {
     return (
-        <View style={styles.container}>
-            <Text>Open up App.tsx to start working on your app!</Text>
-            <StatusBar style="auto" />
-        </View>
+        <ForYouScreen/>
     );
 }
 
-const styles = StyleSheet.create({
-    container: {
-        flex: 1,
-        backgroundColor: '#fff',
-        alignItems: 'center',
-        justifyContent: 'center',
-    },
-});
diff --git a/assets/plus.svg b/assets/plus.svg
new file mode 100644
index 0000000..ddb7e2f
--- /dev/null
+++ b/assets/plus.svg
@@ -0,0 +1 @@
+<?xml version="1.0" ?><!DOCTYPE svg  PUBLIC '-//W3C//DTD SVG 1.1//EN'  'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'><svg enable-background="new 0 0 50 50" height="50px" id="Layer_1" version="1.1" viewBox="0 0 50 50" width="50px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><rect fill="none" height="50" width="50"/><line fill="none" stroke="#ffffff" stroke-miterlimit="10" stroke-width="4" x1="9" x2="41" y1="25" y2="25"/><line fill="none" stroke="#ffffff" stroke-miterlimit="10" stroke-width="4" x1="25" x2="25" y1="9" y2="41"/></svg>
\ No newline at end of file
diff --git a/declarations.d.ts b/declarations.d.ts
new file mode 100644
index 0000000..87c34ef
--- /dev/null
+++ b/declarations.d.ts
@@ -0,0 +1,6 @@
+declare module "*.svg" {
+    import React from "react";
+    import { SvgProps } from "react-native-svg";
+    const content: React.FC<SvgProps>;
+    export default content;
+  }
\ No newline at end of file
diff --git a/metro.config.js b/metro.config.js
new file mode 100644
index 0000000..c2a694e
--- /dev/null
+++ b/metro.config.js
@@ -0,0 +1,19 @@
+const { getDefaultConfig } = require("expo/metro-config");
+
+module.exports = (() => {
+  const config = getDefaultConfig(__dirname);
+
+  const { transformer, resolver } = config;
+
+  config.transformer = {
+    ...transformer,
+    babelTransformerPath: require.resolve("react-native-svg-transformer"),
+  };
+  config.resolver = {
+    ...resolver,
+    assetExts: resolver.assetExts.filter((ext) => ext !== "svg"),
+    sourceExts: [...resolver.sourceExts, "svg"],
+  };
+
+  return config;
+})();
\ No newline at end of file
diff --git a/package.json b/package.json
index 7e7b288..cdeeaa4 100644
--- a/package.json
+++ b/package.json
@@ -3,26 +3,31 @@
     "version": "1.0.0",
     "main": "node_modules/expo/AppEntry.js",
     "scripts": {
-        "start": "expo start",
-        "android": "expo start --android",
-        "ios": "expo start --ios",
-        "web": "expo start --web",
-        "format": "prettier --write .",
-        "lint": "eslint ."
+      "start": "expo start",
+      "android": "expo start --android",
+      "ios": "expo start --ios",
+      "web": "expo start --web",
+      "format": "prettier --write .",
+      "lint": "eslint ."
     },
     "dependencies": {
-        "expo": "49.0.21",
-        "expo-status-bar": "1.6.0",
-        "react": "18.2.0",
-        "react-native": "0.72.6"
+      "expo": "49.0.21",
+      "expo-status-bar": "1.6.0",
+      "react": "18.2.0",
+      "react-native": "0.72.6",
+      "react-native-fast-image": "^8.6.3",
+      "react-native-pager-view": "6.2.0",
+      "react-native-svg-transformer": "^1.3.0",
+      "expo-image": "~1.3.5"
     },
     "devDependencies": {
-        "@babel/core": "7.23.5",
-        "@types/react": "18.2.14",
-        "eslint": "8.55.0",
-        "eslint-config-universe": "12.0.0",
-        "prettier": "3.1.0",
-        "typescript": "5.1.3"
+      "@babel/core": "7.23.5",
+      "@types/react": "18.2.14",
+      "eslint": "8.55.0",
+      "eslint-config-universe": "12.0.0",
+      "prettier": "3.1.0",
+      "typescript": "5.1.3"
     },
     "private": true
-}
+  }
+  
\ No newline at end of file
diff --git a/screen/ForYouPage/index.tsx b/screen/ForYouPage/index.tsx
new file mode 100644
index 0000000..40217a6
--- /dev/null
+++ b/screen/ForYouPage/index.tsx
@@ -0,0 +1,226 @@
+import React, { useState, useEffect, useCallback, useMemo } from 'react';
+import PagerView from 'react-native-pager-view';
+import { Image as ExpoImage } from 'expo-image';
+import {
+    Text,
+    useWindowDimensions,
+    View,
+} from 'react-native';
+import HomeIcon from '../../assets/home.svg'
+import DiscoverIcon from '../../assets/discover.svg'
+import ActivityIcon from '../../assets/activity.svg'
+import BookmarkIcon from '../../assets/bookmark.svg'
+import ProfileIcon from '../../assets/profile.svg'
+import SearchIcon from '../../assets/search.svg'
+import HeartIcon from '../../assets/heart.svg'
+import CommentIcon from '../../assets/comment.svg'
+import ShareIcon from '../../assets/share.svg'
+import PlaylistIcon from '../../assets/playlist.svg'
+import PlusIcon from '../../assets/plus.svg'
+import AnimatedButton from '../components/AnimatedButton';
+
+
+type ForYouData = {
+    description: string;
+    id:number;
+    image:string;
+    playlist:string;
+    question:string;
+    type:string;
+    options:Options[],
+    user:User
+}
+
+type Options = {
+    id:string;
+    answer:string;
+}
+
+type Answers = {
+    id:number;
+    correct_options: Options[]
+}
+
+interface User {
+    name:string;
+    avatar: string;
+}
+
+type PagerCompProps = {
+    data: ForYouData;
+    correctOption: string | undefined;
+}
+
+
+type TabButtonsProps = {
+    children: string | JSX.Element | JSX.Element[],
+    isSelected?: boolean,
+    title: string
+}
+
+const TabButtons = ({ title, children, isSelected = false }: TabButtonsProps): any => {
+    return (
+        <View style={{ alignItems: 'center' }}>
+            {children}
+            <Text style={{ color: isSelected ? 'white' : 'grey', fontSize: 12, marginTop: 5 }}>{title}</Text>
+        </View>
+    )
+}
+
+const BottomTabs = () => {
+    return (
+        <View style={{ backgroundColor: 'black', flexDirection: 'row', height: 70, width: '100%', position: 'absolute', bottom: 0, justifyContent: 'space-between', paddingHorizontal: 20, paddingVertical: 10 }}>
+            <TabButtons isSelected title={'Home'}>
+                <HomeIcon />
+            </TabButtons>
+            <TabButtons title={'Discover'}>
+                <DiscoverIcon />
+            </TabButtons>
+            <TabButtons title={'Activity'}>
+                <ActivityIcon />
+            </TabButtons>
+            <TabButtons title={'Bookmarks'}>
+                <BookmarkIcon fillOpacity={0.4} width={20} height={20} />
+            </TabButtons>
+            <TabButtons title={'Profile'}>
+                <ProfileIcon />
+            </TabButtons>
+        </View>
+    )
+}
+
+const TopTabs = () => {
+    return (
+        <View style={{ backgroundColor: 'transparent', flexDirection: 'row', height: 100, width: '100%', position: 'absolute', top: 0, justifyContent: 'space-between', paddingHorizontal: 20, paddingTop: 60, alignItems: 'center' }}>
+            <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center' }}>
+                <ActivityIcon />
+                <Text style={{ color: 'white', fontSize: 12, marginLeft: 5, opacity: 0.7 }} >10 min</Text>
+            </View>
+            <View style={{paddingRight:40}}>
+                <Text style={{ color: 'white', fontWeight: 'bold' }}>For You</Text>
+                <View style={{ height: 3, width: 40, backgroundColor: 'white', alignSelf: 'center', marginTop: 8 }} />
+            </View>
+
+            <SearchIcon />
+        </View>
+    )
+}
+
+const INIT_ENABLED: boolean = false
+
+const ForYouScreen = (props: any) => {
+
+ 
+
+    const window = useWindowDimensions();
+    const headerHeight = 40;
+    const [isCorrect, setIsCorrect] = useState<boolean|null>(null) 
+    const [data, setData] = useState<ForYouData[]>([]) 
+    const [answers, setAnswers] = useState<Answers[]>([]) 
+
+    
+    
+    const fetchFoYouData = async () => {
+        let response = await fetch('https://cross-platform.rp.devfactory.com/for_you')
+        let json:ForYouData = await response.json() 
+
+        let newData = [...data,json]
+        setData(newData)
+        getAnswer(json.id);
+      }
+    
+      useEffect(() => {
+        if(data.length === 0 || data.length < 3){
+            fetchFoYouData()
+        }
+        
+      }, [data])
+
+     
+     
+    const getAnswer = async (id:number) => {
+
+        let response = await fetch(`https://cross-platform.rp.devfactory.com/reveal?id=${id}`)
+        let json:Answers = await response.json() 
+        let ans = [...answers,json]
+        setAnswers(ans)
+
+      }
+
+
+    
+
+    const PagerComp = React.memo( function PagerComp ({data,correctOption} :  PagerCompProps) {
+
+        const [selectedId, setSelectedId] = useState<string>()
+       
+        return (
+                <ExpoImage   style={{ height: window.height - headerHeight, paddingTop: 130, justifyContent: 'space-between' }} source={{ uri: data.image }}>
+                    <Text style={{ color: 'white', fontSize: 20, marginLeft: 20, textAlign: 'left', backgroundColor: 'rgba(0,0,0,0.7)', flexWrap: 'wrap', padding: 10, textAlignVertical: 'auto', width: 'auto', flexShrink: 1 }}>
+                        {data.question}
+                    </Text>
+
+                    <View style={{ flexDirection: 'column', width: '100%', height: window.height * 0.5, }}>
+                        <View style={{ width: '100%', height: window.height * 0.5 - 60, flexDirection: 'row' }}>
+                            <View style={{ width: '80%', alignItems: 'center', paddingTop:60 }}>
+                                {data.options.map((i:Options,index) => <AnimatedButton key={`${i.id} + ${index}a`} disabled={selectedId ? true : false} onPress={() => {setSelectedId(i.id); console.log(i.id,correctOption)}} isCorrect={selectedId === i?.id ? correctOption === i.id ? true : false : null } text={i.answer} />)}
+                                
+                                <Text style={{fontWeight:'bold', color:'white',alignSelf:'flex-start',fontSize:14, marginLeft:15,marginTop:16}}>{data.user.name}</Text>
+                                <Text numberOfLines={1} style={{ color:'white',alignSelf:'flex-start',fontSize:14, marginLeft:15,marginTop:5}}>{data.description}</Text>
+
+                            </View>
+                            
+                            <View style={{ width: '20%', alignItems: 'center', paddingVertical: 5, justifyContent: 'space-between' }}>
+                                <View style={{ width: 60, height: 60 }}>
+                                    <ExpoImage style={{ width: 60, height: 60, borderRadius: 30, borderWidth: 2, borderColor: 'white' }} source={{ uri: data.user.avatar }} />
+                                    <View style={{ height: 25, width: 25, borderRadius: 15, backgroundColor: 'green', position: 'absolute', bottom: -12, alignSelf: 'center', alignItems: 'center', justifyContent: 'center' }}>
+                                        <PlusIcon width={25} height={25} />
+                                    </View>
+                                </View>
+                                <TabButtons isSelected title={'87'}>
+                                    <HeartIcon />
+                                </TabButtons>
+                                <TabButtons isSelected title={'2'}>
+                                    <CommentIcon />
+                                </TabButtons>
+                                <TabButtons isSelected title={'266'}>
+                                    <BookmarkIcon />
+                                </TabButtons>
+                                <TabButtons isSelected title={'17'}>
+                                    <ShareIcon />
+                                </TabButtons>
+                            </View>
+                        </View>
+                        <View style={{ height: 60, backgroundColor: 'rgba(0,0,0,0.8)', width: '100%', flexDirection:'row',alignItems:'center',paddingBottom:20,paddingLeft:20, }}>
+                            <PlaylistIcon />
+                            <Text style={{color:'white',fontSize:14, marginLeft:10,paddingTop:2}}>Playlist • {data.playlist}</Text>
+                        </View>
+                    </View>
+
+                </ExpoImage>
+        )
+    });
+    
+
+    const getCorrectAnswer = (id:number) => {
+        const option =  answers.find(i => i.id === id)?.correct_options[0].id
+        return option
+    }
+
+    return (
+        <View style={{ flex: 1, backgroundColor: 'black' }}>
+            {data.length > 1 && <PagerView onPageSelected={(e) => {
+                if(e.nativeEvent.position === data.length - 2){
+                fetchFoYouData()
+            }}} initialPage={0}  style={{ height: window.height - headerHeight }} orientation={'vertical'}>
+                {data.map((i,index) => <PagerComp key={`${i.id}+${index}`} correctOption={getCorrectAnswer(i.id)} data={i} />)}
+            </PagerView>}
+
+            <TopTabs />
+
+            <BottomTabs />
+        </View>
+    );
+};
+
+export default ForYouScreen;
\ No newline at end of file
diff --git a/screen/components/AnimatedButton.tsx b/screen/components/AnimatedButton.tsx
new file mode 100644
index 0000000..98d9a25
--- /dev/null
+++ b/screen/components/AnimatedButton.tsx
@@ -0,0 +1,62 @@
+import * as React from 'react';
+import { Text, View, Animated, TouchableOpacity, Image } from 'react-native';
+
+interface AnimatedButtonProps {
+    text: string,
+    onPress: any,
+    isCorrect: boolean | null,
+    disabled:boolean;
+}
+
+
+const AnimatedButton = (props: AnimatedButtonProps) => {
+
+    const [animation, setAnimation] = React.useState(new Animated.Value(0))
+    const [toValue, setToValue] = React.useState(100)
+    const [showImage, setShowImage] = React.useState(false)
+
+    React.useEffect(() => {
+        if (props.isCorrect != null) {
+            Animated.timing(animation, {
+                toValue: toValue,
+                duration: 500,
+                useNativeDriver: false
+            }).start();
+            setTimeout(() => {
+                setShowImage(true)
+            }, 400);
+        }
+
+    }, [props.isCorrect, toValue])
+
+    const gifSrc = props.isCorrect ? require('../../assets/correct.gif') : require('../../assets/wrong.gif');
+    const backgroundColor = props.isCorrect ? 'rgba(5, 128, 93,0.7)' : 'rgba(230, 7, 37,0.7)'
+    return (
+        <TouchableOpacity disabled={props.disabled} style={{ height: 65, width: '90%', marginTop:16 }} onPress={props.onPress}>
+
+            <View onLayout={(event) => {
+                const { width } = event.nativeEvent.layout;
+                setToValue(width)
+            }} style={{ backgroundColor: 'rgba(255,255,255,0.5)', height: 65, borderRadius: 5, justifyContent: 'center', alignItems: 'center' }}>
+                <Animated.View style={{ backgroundColor: backgroundColor, position: 'absolute', height: 65, width: animation, borderRadius: 5, }}>
+                </Animated.View>
+                <Text style={{
+                    color: 'white', textShadowColor: 'rgba(0, 0, 0, 1)',
+                    textShadowOffset: { width: 1, height: 1 },
+                    textShadowRadius: 2,
+                    fontWeight: 'bold',
+                    marginRight:22,
+                    width:'85%'
+                }}>{props.text}</Text>
+
+            </View>
+
+            {showImage && <Image style={{ width: 50, height: 50, alignSelf: 'center', position: 'absolute', right: -5,marginTop:props.isCorrect === false ?15 : 0, transform:[{rotate:props.isCorrect === false ? '180deg' : '0deg'}] }} source={gifSrc} />}
+
+
+        </TouchableOpacity>
+    );
+}
+
+
+export default AnimatedButton;
\ No newline at end of file
diff --git a/tsconfig.json b/tsconfig.json
index 09d2dae..00685ad 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,6 +1,7 @@
 {
     "extends": "expo/tsconfig.base",
     "compilerOptions": {
+        "jsx": "react",
         "strict": true
     }
 }
